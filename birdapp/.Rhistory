install.packages("lme4")
library(lme4)
library(lme4)
m1m <- glmer.nb(Number~ CITES + (1|Scientific.Name), data=SURVEY_DATA2)
install.packages("lme4")
library(lme4)
install.packages("nlme")
install.packages("nlme")
getwed()
getwd()
remove.packages("keras")
remove.packages("tensorflow")
library(ape)
library(phytools)
library(picante)
install.packages("yaml")
library(ape)
library(phytools)
library(picante)
install.packages("ape")
library(ape)
install.packages("Rcpp")
library(ape)
library(phytools)
library(picante)
install.packages("permute")
library(picante)
install.packages("vegan")
library(picante)
install.packages("picante")
library(ape)
library(phytools)
library(picante)
install.packages("ggtree")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
BiocManager::install("ggtree")
remove.packages("BiocVersion")
BiocManager::install()
library(rgdal)
library(rgeos)
library(raster)
library(PROJ)
all_guilds_asian <- readOGR('D:/Sicily/Documents/R/All R',
layer = 'guilds_only_all')
all_guilds <- lets.presab(all_guilds_asian, xmn = 55, xmx = 158,
ymn = -16, ymx =53, count=TRUE, res=0.5)#res = 0.1,count=TRUE)
library(letsR)
all_guilds <- lets.presab(all_guilds_asian, xmn = 55, xmx = 158,
ymn = -16, ymx =53, count=TRUE, res=0.5)#res = 0.1,count=TRUE)
all_guilds <- lets.presab(all_guilds_asian, xmn = 55, xmx = 158,
ymn = -16, ymx =53, count=TRUE, res=0.5)#res = 0.1,count=TRUE)
all_guilds_asian <- readOGR('D:/Sicily/Documents/R/All R',
layer = 'guilds_only_all')
#new file: file:///D:/Sicily/Documents/R/All R/last_25.07_allspecies.shp
all_asian_species <- readOGR('D:/Sicily/Documents/R/All R',
layer = 'last_25.07_allspecies')
#try lower resolution, was all_indo_species before
all_indo_species_pa <- lets.presab(all_asian_species, xmn = 55, xmx = 158,
ymn = -16, ymx =53, res = 0.1, count=TRUE)#res = 0.1,count=TRUE)
all_guilds <- lets.presab(all_guilds_asian, xmn = 55, xmx = 158,
ymn = -16, ymx =53, res=0.5, count=TRUE)#res = 0.1,count=TRUE)
#try lower resolution, was all_indo_species before
all_indo_species_pa <- lets.presab(all_asian_species, xmn = 55, xmx = 158,
ymn = -16, ymx =53, res = 0.1, count=TRUE)#res = 0.1,count=TRUE)
install_github("macroecology/letsR")
library(letsR)
library(devtools)
install_github("macroecology/letsR")
library(letsR)
if (!require("remotes"))
install.packages("remotes", repos = "https://cran.rstudio.org")
remotes::install_github("rstudio/bookdown")
remotes::install_github("ismayc/thesisdown")
remove.packages(stringi)
if (!require("remotes"))
install.packages("remotes", repos = "https://cran.rstudio.org")
remotes::install_github("rstudio/bookdown")
remotes::install_github("ismayc/thesisdown")
thesisdown:::is_thesisdown()
# Install bristolthesis directly from GitHub
devtools::install_github("mattlee821/bristolthesis")
install.packages("cachem")
# Install bristolthesis directly from GitHub
devtools::install_github("mattlee821/bristolthesis")
library(beaverdown)
# Install devtools
install.packages("devtools")
library(devtools)
# Install bristolthesis directly from GitHub
devtools::install_github("mattlee821/bristolthesis")
install.packages("devtools")
library(bristolthesis)
setwd("D:/Sicily/Documents/R/All R/birdapp")
#to check that my Tensorflow is working
library(shiny)
library(shinydashboard)
library(rsconnect)
library(keras)
library(tensorflow)
library(tidyverse)
model <- load_model_tf("www/bird_mod/")
load("www/label_list.RData")
target_size <- c(224,224,3)
options(scipen=999)
ui <- dashboardPage(
skin="blue",
#(1) Header
dashboardHeader(title=tags$h1("cagedbirdID",style="font-size: 120%; font-weight: bold; color: white"),
titleWidth = 350,
tags$li(class = "dropdown"),
dropdownMenu(type = "notifications", icon = icon("question-circle", "fa-1x"), badgeStatus = NULL,
headerText="",
tags$li(a(href = "https://twitter.com/sicilyfiennes",
target = "_blank",
tagAppendAttributes(icon("icon-circle"), class = "info"),
"Created by Sicily Fiennes"))
)),
#(2) Sidebar
dashboardSidebar(
width=350,
fileInput("input_image","File" ,accept = c('.jpg','.jpeg','.png')),
tags$br(),
tags$p("Upload the image here.")
),
#(3) Body
dashboardBody(
h4("Instruction:"),
tags$br(),tags$p("1. Take a picture of a bird."),
tags$p("2. Crop image so that bird fills out most of the image."),
tags$p("3. Upload image with menu on the left."),
tags$br(),
fluidRow(
column(h4("Image:"),imageOutput("output_image"), width=6),
column(h4("Result:"),tags$br(),textOutput("warntext",), tags$br(),
tags$p("This bird is probably a:"),tableOutput("text"),width=6)
),tags$br()
))
server <- function(input, output) {
image <- reactive({image_load(input$input_image$datapath, target_size = target_size[1:2])})
prediction <- reactive({
if(is.null(input$input_image)){return(NULL)}
x <- image_to_array(image())
x <- array_reshape(x, c(1, dim(x)))
x <- x/255
pred <- model %>% predict(x)
pred <- data.frame("Bird" = label_list, "Prediction" = t(pred))
pred <- pred[order(pred$Prediction, decreasing=T),][1:5,]
pred$Prediction <- sprintf("%.2f %%", 100*pred$Prediction)
pred
})
output$text <- renderTable({
prediction()
})
output$warntext <- renderText({
req(input$input_image)
if(as.numeric(substr(prediction()[1,2],1,4)) >= 30){return(NULL)}
warntext <- "Warning: I am not sure about this bird species!"
warntext
})
output$output_image <- renderImage({
req(input$input_image)
outfile <- input$input_image$datapath
contentType <- input$input_image$type
list(src = outfile,
contentType=contentType,
width = 400)
}, deleteFile = TRUE)
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(rsconnect)
library(keras)
library(tensorflow)
library(tidyverse)
model <- load_model_tf("www/bird_mod/")
load("www/label_list.RData")
target_size <- c(224,224,3)
options(scipen=999)
ui <- dashboardPage(
skin="blue",
#(1) Header
dashboardHeader(title=tags$h1("cagedbirdID",style="font-size: 120%; font-weight: bold; color: white"),
titleWidth = 350,
tags$li(class = "dropdown"),
dropdownMenu(type = "notifications", icon = icon("question-circle", "fa-1x"), badgeStatus = NULL,
headerText="",
tags$li(a(href = "https://twitter.com/sicilyfiennes",
target = "_blank",
tagAppendAttributes(icon("icon-circle"), class = "info"),
"Created by Sicily Fiennes"))
)),
#(2) Sidebar
dashboardSidebar(
width=350,
fileInput("input_image","File" ,accept = c('.jpg','.jpeg','.png','.webp')),
tags$br(),
tags$p("Upload the image here.")
),
#(3) Body
dashboardBody(
h4("Instruction:"),
tags$br(),tags$p("1. Take a picture of a bird."),
tags$p("2. Crop image so that bird fills out most of the image."),
tags$p("3. Upload image with menu on the left."),
tags$br(),
fluidRow(
column(h4("Image:"),imageOutput("output_image"), width=6),
column(h4("Result:"),tags$br(),textOutput("warntext",), tags$br(),
tags$p("This bird is probably a:"),tableOutput("text"),width=6)
),tags$br()
))
server <- function(input, output) {
image <- reactive({image_load(input$input_image$datapath, target_size = target_size[1:2])})
prediction <- reactive({
if(is.null(input$input_image)){return(NULL)}
x <- image_to_array(image())
x <- array_reshape(x, c(1, dim(x)))
x <- x/255
pred <- model %>% predict(x)
pred <- data.frame("Bird" = label_list, "Prediction" = t(pred))
pred <- pred[order(pred$Prediction, decreasing=T),][1:5,]
pred$Prediction <- sprintf("%.2f %%", 100*pred$Prediction)
pred
})
output$text <- renderTable({
prediction()
})
output$warntext <- renderText({
req(input$input_image)
if(as.numeric(substr(prediction()[1,2],1,4)) >= 30){return(NULL)}
warntext <- "Warning: I am not sure about this bird species!"
warntext
})
output$output_image <- renderImage({
req(input$input_image)
outfile <- input$input_image$datapath
contentType <- input$input_image$type
list(src = outfile,
contentType=contentType,
width = 400)
}, deleteFile = TRUE)
}
shinyApp(ui, server)
rsconnect::setAccountInfo(name='sicily-3', token='EB38C5BD22852C7534D93A9670B9ECA5', secret='fXzYRwMsfpr+Emdlx0dZLK0W6BqzYejIBGmn/Jk+')
install.packages("askpass")
rsconnect::setAccountInfo(name='sicily-3', token='EB38C5BD22852C7534D93A9670B9ECA5', secret='fXzYRwMsfpr+Emdlx0dZLK0W6BqzYejIBGmn/Jk+')
rsconnect::deployApp()
install.packages("packrat")
rsconnect::deployApp()
